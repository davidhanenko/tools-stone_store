input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type MainPageSlide {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  slogan: String
  description: String
  bg_image: UploadFile
  image_1: UploadFile
  image_2: UploadFile
  published_at: DateTime
}

type MainPageSlideConnection {
  values: [MainPageSlide]
  groupBy: MainPageSlideGroupBy
  aggregate: MainPageSlideAggregator
}

type MainPageSlideAggregator {
  count: Int
  totalCount: Int
}

type MainPageSlideGroupBy {
  id: [MainPageSlideConnectionId]
  created_at: [MainPageSlideConnectionCreated_at]
  updated_at: [MainPageSlideConnectionUpdated_at]
  slogan: [MainPageSlideConnectionSlogan]
  description: [MainPageSlideConnectionDescription]
  bg_image: [MainPageSlideConnectionBg_image]
  image_1: [MainPageSlideConnectionImage_1]
  image_2: [MainPageSlideConnectionImage_2]
  published_at: [MainPageSlideConnectionPublished_at]
}

type MainPageSlideConnectionId {
  key: ID
  connection: MainPageSlideConnection
}

type MainPageSlideConnectionCreated_at {
  key: DateTime
  connection: MainPageSlideConnection
}

type MainPageSlideConnectionUpdated_at {
  key: DateTime
  connection: MainPageSlideConnection
}

type MainPageSlideConnectionSlogan {
  key: String
  connection: MainPageSlideConnection
}

type MainPageSlideConnectionDescription {
  key: String
  connection: MainPageSlideConnection
}

type MainPageSlideConnectionBg_image {
  key: ID
  connection: MainPageSlideConnection
}

type MainPageSlideConnectionImage_1 {
  key: ID
  connection: MainPageSlideConnection
}

type MainPageSlideConnectionImage_2 {
  key: ID
  connection: MainPageSlideConnection
}

type MainPageSlideConnectionPublished_at {
  key: DateTime
  connection: MainPageSlideConnection
}

input MainPageSlideInput {
  slogan: String
  description: String
  bg_image: ID
  image_1: ID
  image_2: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editMainPageSlideInput {
  slogan: String
  description: String
  bg_image: ID
  image_1: ID
  image_2: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createMainPageSlideInput {
  data: MainPageSlideInput
}

type createMainPageSlidePayload {
  mainPageSlide: MainPageSlide
}

input updateMainPageSlideInput {
  where: InputID
  data: editMainPageSlideInput
}

type updateMainPageSlidePayload {
  mainPageSlide: MainPageSlide
}

input deleteMainPageSlideInput {
  where: InputID
}

type deleteMainPageSlidePayload {
  mainPageSlide: MainPageSlide
}

type ProductCategory {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  product_category: String
  published_at: DateTime
  single_products(sort: String, limit: Int, start: Int, where: JSON): [SingleProduct]
}

type ProductCategoryConnection {
  values: [ProductCategory]
  groupBy: ProductCategoryGroupBy
  aggregate: ProductCategoryAggregator
}

type ProductCategoryAggregator {
  count: Int
  totalCount: Int
}

type ProductCategoryGroupBy {
  id: [ProductCategoryConnectionId]
  created_at: [ProductCategoryConnectionCreated_at]
  updated_at: [ProductCategoryConnectionUpdated_at]
  product_category: [ProductCategoryConnectionProduct_category]
  published_at: [ProductCategoryConnectionPublished_at]
}

type ProductCategoryConnectionId {
  key: ID
  connection: ProductCategoryConnection
}

type ProductCategoryConnectionCreated_at {
  key: DateTime
  connection: ProductCategoryConnection
}

type ProductCategoryConnectionUpdated_at {
  key: DateTime
  connection: ProductCategoryConnection
}

type ProductCategoryConnectionProduct_category {
  key: String
  connection: ProductCategoryConnection
}

type ProductCategoryConnectionPublished_at {
  key: DateTime
  connection: ProductCategoryConnection
}

input ProductCategoryInput {
  product_category: String
  single_products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProductCategoryInput {
  product_category: String
  single_products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createProductCategoryInput {
  data: ProductCategoryInput
}

type createProductCategoryPayload {
  productCategory: ProductCategory
}

input updateProductCategoryInput {
  where: InputID
  data: editProductCategoryInput
}

type updateProductCategoryPayload {
  productCategory: ProductCategory
}

input deleteProductCategoryInput {
  where: InputID
}

type deleteProductCategoryPayload {
  productCategory: ProductCategory
}

type Products {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  product_title: String
  published_at: DateTime
  product_categories(sort: String, limit: Int, start: Int, where: JSON): [ProductCategory]
}

type ProductsConnection {
  values: [Products]
  groupBy: ProductsGroupBy
  aggregate: ProductsAggregator
}

type ProductsAggregator {
  count: Int
  totalCount: Int
}

type ProductsGroupBy {
  id: [ProductsConnectionId]
  created_at: [ProductsConnectionCreated_at]
  updated_at: [ProductsConnectionUpdated_at]
  product_title: [ProductsConnectionProduct_title]
  published_at: [ProductsConnectionPublished_at]
}

type ProductsConnectionId {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionCreated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionUpdated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionProduct_title {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionPublished_at {
  key: DateTime
  connection: ProductsConnection
}

input ProductInput {
  product_title: String
  product_categories: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProductInput {
  product_title: String
  product_categories: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Products
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Products
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Products
}

enum ENUM_SINGLEPRODUCT_SIZES {
  one
  two
  three
}

type SingleProduct {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  price: Float
  sizes: ENUM_SINGLEPRODUCT_SIZES
  image: UploadFile
  description: String
  product_category: ProductCategory
  published_at: DateTime
}

type SingleProductConnection {
  values: [SingleProduct]
  groupBy: SingleProductGroupBy
  aggregate: SingleProductAggregator
}

type SingleProductAggregator {
  count: Int
  totalCount: Int
  sum: SingleProductAggregatorSum
  avg: SingleProductAggregatorAvg
  min: SingleProductAggregatorMin
  max: SingleProductAggregatorMax
}

type SingleProductAggregatorSum {
  price: Float
}

type SingleProductAggregatorAvg {
  price: Float
}

type SingleProductAggregatorMin {
  price: Float
}

type SingleProductAggregatorMax {
  price: Float
}

type SingleProductGroupBy {
  id: [SingleProductConnectionId]
  created_at: [SingleProductConnectionCreated_at]
  updated_at: [SingleProductConnectionUpdated_at]
  title: [SingleProductConnectionTitle]
  price: [SingleProductConnectionPrice]
  sizes: [SingleProductConnectionSizes]
  image: [SingleProductConnectionImage]
  description: [SingleProductConnectionDescription]
  product_category: [SingleProductConnectionProduct_category]
  published_at: [SingleProductConnectionPublished_at]
}

type SingleProductConnectionId {
  key: ID
  connection: SingleProductConnection
}

type SingleProductConnectionCreated_at {
  key: DateTime
  connection: SingleProductConnection
}

type SingleProductConnectionUpdated_at {
  key: DateTime
  connection: SingleProductConnection
}

type SingleProductConnectionTitle {
  key: String
  connection: SingleProductConnection
}

type SingleProductConnectionPrice {
  key: Float
  connection: SingleProductConnection
}

type SingleProductConnectionSizes {
  key: String
  connection: SingleProductConnection
}

type SingleProductConnectionImage {
  key: ID
  connection: SingleProductConnection
}

type SingleProductConnectionDescription {
  key: String
  connection: SingleProductConnection
}

type SingleProductConnectionProduct_category {
  key: ID
  connection: SingleProductConnection
}

type SingleProductConnectionPublished_at {
  key: DateTime
  connection: SingleProductConnection
}

input SingleProductInput {
  title: String
  price: Float
  sizes: ENUM_SINGLEPRODUCT_SIZES
  image: ID
  description: String
  product_category: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSingleProductInput {
  title: String
  price: Float
  sizes: ENUM_SINGLEPRODUCT_SIZES
  image: ID
  description: String
  product_category: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSingleProductInput {
  data: SingleProductInput
}

type createSingleProductPayload {
  singleProduct: SingleProduct
}

input updateSingleProductInput {
  where: InputID
  data: editSingleProductInput
}

type updateSingleProductPayload {
  singleProduct: SingleProduct
}

input deleteSingleProductInput {
  where: InputID
}

type deleteSingleProductPayload {
  singleProduct: SingleProduct
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | MainPageSlide | MainPageSlideConnection | MainPageSlideAggregator | MainPageSlideGroupBy | MainPageSlideConnectionId | MainPageSlideConnectionCreated_at | MainPageSlideConnectionUpdated_at | MainPageSlideConnectionSlogan | MainPageSlideConnectionDescription | MainPageSlideConnectionBg_image | MainPageSlideConnectionImage_1 | MainPageSlideConnectionImage_2 | MainPageSlideConnectionPublished_at | createMainPageSlidePayload | updateMainPageSlidePayload | deleteMainPageSlidePayload | ProductCategory | ProductCategoryConnection | ProductCategoryAggregator | ProductCategoryGroupBy | ProductCategoryConnectionId | ProductCategoryConnectionCreated_at | ProductCategoryConnectionUpdated_at | ProductCategoryConnectionProduct_category | ProductCategoryConnectionPublished_at | createProductCategoryPayload | updateProductCategoryPayload | deleteProductCategoryPayload | Products | ProductsConnection | ProductsAggregator | ProductsGroupBy | ProductsConnectionId | ProductsConnectionCreated_at | ProductsConnectionUpdated_at | ProductsConnectionProduct_title | ProductsConnectionPublished_at | createProductPayload | updateProductPayload | deleteProductPayload | SingleProduct | SingleProductConnection | SingleProductAggregator | SingleProductAggregatorSum | SingleProductAggregatorAvg | SingleProductAggregatorMin | SingleProductAggregatorMax | SingleProductGroupBy | SingleProductConnectionId | SingleProductConnectionCreated_at | SingleProductConnectionUpdated_at | SingleProductConnectionTitle | SingleProductConnectionPrice | SingleProductConnectionSizes | SingleProductConnectionImage | SingleProductConnectionDescription | SingleProductConnectionProduct_category | SingleProductConnectionPublished_at | createSingleProductPayload | updateSingleProductPayload | deleteSingleProductPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  mainPageSlide(id: ID!, publicationState: PublicationState): MainPageSlide
  mainPageSlides(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [MainPageSlide]
  mainPageSlidesConnection(sort: String, limit: Int, start: Int, where: JSON): MainPageSlideConnection
  productCategory(id: ID!, publicationState: PublicationState): ProductCategory
  productCategories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ProductCategory]
  productCategoriesConnection(sort: String, limit: Int, start: Int, where: JSON): ProductCategoryConnection
  product(id: ID!, publicationState: PublicationState): Products
  products(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Products]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductsConnection
  singleProduct(id: ID!, publicationState: PublicationState): SingleProduct
  singleProducts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [SingleProduct]
  singleProductsConnection(sort: String, limit: Int, start: Int, where: JSON): SingleProductConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createMainPageSlide(input: createMainPageSlideInput): createMainPageSlidePayload
  updateMainPageSlide(input: updateMainPageSlideInput): updateMainPageSlidePayload
  deleteMainPageSlide(input: deleteMainPageSlideInput): deleteMainPageSlidePayload
  createProductCategory(input: createProductCategoryInput): createProductCategoryPayload
  updateProductCategory(input: updateProductCategoryInput): updateProductCategoryPayload
  deleteProductCategory(input: deleteProductCategoryInput): deleteProductCategoryPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createSingleProduct(input: createSingleProductInput): createSingleProductPayload
  updateSingleProduct(input: updateSingleProductInput): updateSingleProductPayload
  deleteSingleProduct(input: deleteSingleProductInput): deleteSingleProductPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
