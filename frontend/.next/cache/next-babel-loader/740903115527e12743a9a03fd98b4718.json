{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-inner-declarations */\nimport { useState, useEffect } from 'react';\nexport default function useWindowDimensions() {\n  _s();\n\n  var hasWindow = true;\n\n  function getWindowDimensions() {\n    var width = hasWindow ? window.innerWidth : null;\n    var height = hasWindow ? window.innerHeight : null;\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  var _useState = useState(getWindowDimensions()),\n      windowDimensions = _useState[0],\n      setWindowDimensions = _useState[1]; // useEffect(() => {\n  //   if (hasWindow) {\n  //     function handleResize() {\n  //       setWindowDimensions(getWindowDimensions());\n  //     }\n  //     window.addEventListener('resize', handleResize);\n  //     return () => window.removeEventListener('resize', handleResize);\n  //   }\n  // }, [hasWindow]);\n\n\n  return windowDimensions;\n}\n\n_s(useWindowDimensions, \"91Gak1OFu7rWfqVNC+sfO68GMHA=\");","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/lib/windowDimensions.js"],"names":["useState","useEffect","useWindowDimensions","hasWindow","getWindowDimensions","width","window","innerWidth","height","innerHeight","windowDimensions","setWindowDimensions"],"mappings":";;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,mBAAT,GAA+B;AAAA;;AAC5C,MAAMC,SAAS,OAAf;;AAEA,WAASC,mBAAT,GAA+B;AAC7B,QAAMC,KAAK,GAAGF,SAAS,GAAGG,MAAM,CAACC,UAAV,GAAuB,IAA9C;AACA,QAAMC,MAAM,GAAGL,SAAS,GAAGG,MAAM,CAACG,WAAV,GAAwB,IAAhD;AACA,WAAO;AACLJ,MAAAA,KAAK,EAALA,KADK;AAELG,MAAAA,MAAM,EAANA;AAFK,KAAP;AAID;;AAV2C,kBAYIR,QAAQ,CACtDI,mBAAmB,EADmC,CAZZ;AAAA,MAYrCM,gBAZqC;AAAA,MAYnBC,mBAZmB,iBAgB5C;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,SAAOD,gBAAP;AACD;;GA5BuBR,mB","sourcesContent":["/* eslint-disable no-inner-declarations */\nimport { useState, useEffect } from 'react';\n\nexport default function useWindowDimensions() {\n  const hasWindow = typeof window !== 'undefined';\n\n  function getWindowDimensions() {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n    return {\n      width,\n      height,\n    };\n  }\n\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  // useEffect(() => {\n  //   if (hasWindow) {\n  //     function handleResize() {\n  //       setWindowDimensions(getWindowDimensions());\n  //     }\n\n  //     window.addEventListener('resize', handleResize);\n  //     return () => window.removeEventListener('resize', handleResize);\n  //   }\n  // }, [hasWindow]);\n\n  return windowDimensions;\n}\n"]},"metadata":{},"sourceType":"module"}