{"ast":null,"code":"/* eslint-disable no-inner-declarations */\nimport { useState, useEffect } from 'react';\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, ...arguments);\n    }, ms);\n  };\n}\n\nexport default function useWindowDimensions() {\n  // const hasWindow = typeof window !== 'undefined';\n  // function getWindowDimensions() {\n  //   const width = hasWindow ? window.innerWidth : null;\n  //   const height = hasWindow ? window.innerHeight : null;\n  //   return {\n  //     width,\n  //     height,\n  //   };\n  // }\n  const {\n    0: windowDimensions,\n    1: setWindowDimensions\n  } = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    const debouncedHandleResize = debounce(function handleResize() {\n      setWindowDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    }, 100);\n    window.addEventListener('resize', debouncedHandleResize);\n    return () => window.removeEventListener('resize', debouncedHandleResize);\n  }, []);\n  return windowDimensions;\n}","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/lib/windowDimensions.js"],"names":["useState","useEffect","debounce","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","useWindowDimensions","windowDimensions","setWindowDimensions","width","undefined","height","debouncedHandleResize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,QAAT,CAAkBC,EAAlB,EAAsBC,EAAtB,EAA0B;AACxB,MAAIC,KAAJ;AACA,SAAQC,CAAD,IAAO;AACZC,IAAAA,YAAY,CAACF,KAAD,CAAZ;AACAA,IAAAA,KAAK,GAAGG,UAAU,CAAEF,CAAD,IAAO;AACxBD,MAAAA,KAAK,GAAG,IAAR;AACAF,MAAAA,EAAE,CAACM,KAAH,CAAS,IAAT,EAAe,GAAGC,SAAlB;AACD,KAHiB,EAGfN,EAHe,CAAlB;AAID,GAND;AAOD;;AAED,eAAe,SAASO,mBAAT,GAA+B;AAC5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM;AAAA,OAACC,gBAAD;AAAA,OAAmBC;AAAnB,MAA0Cb,QAAQ,CAAC;AACvDc,IAAAA,KAAK,EAAEC,SADgD;AAEvDC,IAAAA,MAAM,EAAED;AAF+C,GAAD,CAAxD;AAKAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,qBAAqB,GAAGf,QAAQ,CAAC,SAASgB,YAAT,GAAwB;AAC7DL,MAAAA,mBAAmB,CAAC;AAClBC,QAAAA,KAAK,EAAEK,MAAM,CAACC,UADI;AAElBJ,QAAAA,MAAM,EAAEG,MAAM,CAACE;AAFG,OAAD,CAAnB;AAID,KALqC,EAKnC,GALmC,CAAtC;AAOAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCL,qBAAlC;AACA,WAAO,MAAME,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCN,qBAArC,CAAb;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAOL,gBAAP;AACD","sourcesContent":["/* eslint-disable no-inner-declarations */\nimport { useState, useEffect } from 'react';\n\nfunction debounce(fn, ms) {\n  let timer;\n  return (_) => {\n    clearTimeout(timer);\n    timer = setTimeout((_) => {\n      timer = null;\n      fn.apply(this, ...arguments);\n    }, ms);\n  };\n}\n\nexport default function useWindowDimensions() {\n  // const hasWindow = typeof window !== 'undefined';\n\n  // function getWindowDimensions() {\n  //   const width = hasWindow ? window.innerWidth : null;\n  //   const height = hasWindow ? window.innerHeight : null;\n  //   return {\n  //     width,\n  //     height,\n  //   };\n  // }\n\n  const [windowDimensions, setWindowDimensions] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    const debouncedHandleResize = debounce(function handleResize() {\n      setWindowDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }, 100);\n\n    window.addEventListener('resize', debouncedHandleResize);\n    return () => window.removeEventListener('resize', debouncedHandleResize);\n  }, []);\n\n  return windowDimensions;\n}\n"]},"metadata":{},"sourceType":"module"}