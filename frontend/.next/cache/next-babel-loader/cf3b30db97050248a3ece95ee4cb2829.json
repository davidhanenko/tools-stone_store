{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/Files/Work/A2Z/frontend/components/items/items-page/Items.js\";\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport ItemsSlider from '../../sliders/items-slider/ItemsSlider';\nimport ItemsCategory from './ItemsCategory';\nimport { ItemsStyles } from './ItemsStyles'; // const ALL_PRODUCTS = gql`\n//   query ALL_PRODUCTS {\n//     products {\n//       id\n//       title: product_title\n//       category: product_categories(limit: 1) {\n//         single: single_products(limit: 1) {\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   }\n// `;\n\nexport default function Products({\n  productsCategory\n}) {\n  var _data$products;\n\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(ALL_PRODUCTS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 21\n  }, this);\n  const SLIDE_COUNT = data === null || data === void 0 ? void 0 : (_data$products = data.products) === null || _data$products === void 0 ? void 0 : _data$products.length;\n  const slides = Array.from(Array(SLIDE_COUNT).keys()); // func from Embla Carousel docs\n\n  const mediaByIndex = index => data === null || data === void 0 ? void 0 : data.products[index % (data === null || data === void 0 ? void 0 : data.products.length)];\n\n  return /*#__PURE__*/_jsxDEV(ItemsStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"main-title\",\n      children: \"Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ItemsSlider, {\n      slides: slides,\n      mediaByIndex: mediaByIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), productsCategory && /*#__PURE__*/_jsxDEV(ItemsCategory, {\n      productsCategory: productsCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/components/items/items-page/Items.js"],"names":["gql","useQuery","ItemsSlider","ItemsCategory","ItemsStyles","Products","productsCategory","data","error","loading","ALL_PRODUCTS","message","SLIDE_COUNT","products","length","slides","Array","from","keys","mediaByIndex","index"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,WAAP,MAAwB,wCAAxB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,WAAT,QAA2B,eAA3B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAwC;AAAA;;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BR,QAAQ,CAACS,YAAD,CAAzC;AAEA,MAAID,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,QAAMC,WAAW,GAAGL,IAAH,aAAGA,IAAH,yCAAGA,IAAI,CAAEM,QAAT,mDAAG,eAAgBC,MAApC;AACA,QAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACJ,WAAD,CAAL,CAAmBM,IAAnB,EAAX,CAAf,CAPqD,CAQrD;;AACA,QAAMC,YAAY,GAAGC,KAAK,IAAIb,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEM,QAAN,CAAeO,KAAK,IAAGb,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEM,QAAN,CAAeC,MAAlB,CAApB,CAA9B;;AAEA,sBACE,QAAC,WAAD;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AAAa,MAAA,MAAM,EAAEC,MAArB;AAA6B,MAAA,YAAY,EAAEI;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGb,gBAAgB,iBAAI,QAAC,aAAD;AAAe,MAAA,gBAAgB,EAAEA;AAAjC;AAAA;AAAA;AAAA;AAAA,YAHvB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\nimport ItemsSlider from '../../sliders/items-slider/ItemsSlider';\n\nimport ItemsCategory from './ItemsCategory';\nimport { ItemsStyles} from './ItemsStyles';\n\n// const ALL_PRODUCTS = gql`\n//   query ALL_PRODUCTS {\n//     products {\n//       id\n//       title: product_title\n//       category: product_categories(limit: 1) {\n//         single: single_products(limit: 1) {\n//           image {\n//             url\n//           }\n//         }\n//       }\n//     }\n//   }\n// `;\n\n\n\nexport default function Products({ productsCategory }) {\n  const { data, error, loading } = useQuery(ALL_PRODUCTS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  const SLIDE_COUNT = data?.products?.length;\n  const slides = Array.from(Array(SLIDE_COUNT).keys());\n  // func from Embla Carousel docs\n  const mediaByIndex = index => data?.products[index % data?.products.length];\n\n  return (\n    <ItemsStyles>\n      <h2 className='main-title'>Products</h2>\n      <ItemsSlider slides={slides} mediaByIndex={mediaByIndex} />\n      {productsCategory && <ItemsCategory productsCategory={productsCategory} />}\n    </ItemsStyles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}