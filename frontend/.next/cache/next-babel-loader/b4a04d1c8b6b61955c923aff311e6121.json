{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Files/Work/A2Z/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"{\\n mainPages {\\n      bg_image_1 {\\n        id\\n        url\\n      }\\n      bg_image_2 {\\n        id\\n        url\\n      }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query MAIN_BACKGROUNDS_QUERY {\\n    mainPage {\\n      bg_image_1 {\\n        id\\n        url\\n      }\\n      bg_image_2 {\\n        id\\n        url\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/client';\nimport { InMemoryCache } from '@apollo/client/cache';\nimport { ApolloClient } from '@apollo/client/core';\nimport gql from 'graphql-tag';\nvar client = new ApolloClient({\n  link: 'http://localhost:1337/graphql',\n  cache: new InMemoryCache(),\n  connectToDevTools: true\n});\nvar MAIN_BACKGROUNDS_QUERY = gql(_templateObject());\n\nvar _client$query = client.query({\n  query: gql(_templateObject2())\n}),\n    mainPage = _client$query.mainPage;\n\nconsole.log(mainPage);\nexport var media = [];\nexport var mediaByIndex = function mediaByIndex(index) {\n  return media[index % media.length];\n};","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/components/Carousel/media/index.js"],"names":["useQuery","InMemoryCache","ApolloClient","gql","client","link","cache","connectToDevTools","MAIN_BACKGROUNDS_QUERY","query","mainPage","console","log","media","mediaByIndex","index","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,IAAI,EAAE,+BADwB;AAE9BC,EAAAA,KAAK,EAAE,IAAIL,aAAJ,EAFuB;AAG9BM,EAAAA,iBAAiB,EAAE;AAHW,CAAjB,CAAf;AAMA,IAAMC,sBAAsB,GAAGL,GAAH,mBAA5B;;oBAeqBC,MAAM,CAACK,KAAP,CAAa;AAChCA,EAAAA,KAAK,EAAEN,GAAF;AAD2B,CAAb,C;IAAbO,Q,iBAAAA,Q;;AAcRC,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,OAAO,IAAMG,KAAK,GAAG,EAAd;AACP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;AAAA,SAAWF,KAAK,CAACE,KAAK,GAAGF,KAAK,CAACG,MAAf,CAAhB;AAAA,CAArB","sourcesContent":["import { useQuery } from '@apollo/client';\nimport { InMemoryCache } from '@apollo/client/cache';\nimport { ApolloClient } from '@apollo/client/core';\nimport gql from 'graphql-tag';\n\nconst client = new ApolloClient({\n  link: 'http://localhost:1337/graphql',\n  cache: new InMemoryCache(),\n  connectToDevTools: true,\n});\n\nconst MAIN_BACKGROUNDS_QUERY = gql`\n  query MAIN_BACKGROUNDS_QUERY {\n    mainPage {\n      bg_image_1 {\n        id\n        url\n      }\n      bg_image_2 {\n        id\n        url\n      }\n    }\n  }\n`;\n\nconst { mainPage } = client.query({\n  query: gql`{\n mainPages {\n      bg_image_1 {\n        id\n        url\n      }\n      bg_image_2 {\n        id\n        url\n      }\n    }\n`,\n});\nconsole.log(mainPage);\n\nexport const media = [];\nexport const mediaByIndex = (index) => media[index % media.length];\n"]},"metadata":{},"sourceType":"module"}