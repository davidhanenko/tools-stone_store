{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Files/Work/A2Z/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      {\\n        mPage {\\n          image_1 {\\n            id\\n            url\\n          }\\n          image_2 {\\n            id\\n            url\\n          }\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/client';\nimport { InMemoryCache } from '@apollo/client/cache';\nimport { ApolloClient } from '@apollo/client/core';\nimport gql from 'graphql-tag';\nvar client = new ApolloClient({\n  uri: 'http://localhost:1337/graphql',\n  cache: new InMemoryCache(),\n  connectToDevTools: true\n});\nvar media = [];\ncreateClient.query({\n  query: gql(_templateObject())\n}).then(function (response) {\n  return media.push(response.data.mPage.image_1[0].url, response.data.mPage.image_2[0].url);\n})[\"catch\"](function (err) {\n  return console.error(err);\n});\nexport { media };\nexport var mediaByIndex = function mediaByIndex(index) {\n  return media[index % media.length];\n};","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/components/Carousel/media/index.js"],"names":["useQuery","InMemoryCache","ApolloClient","gql","client","uri","cache","connectToDevTools","media","createClient","query","then","response","push","data","mPage","image_1","url","image_2","err","console","error","mediaByIndex","index","length"],"mappings":";;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,GAAG,EAAE,+BADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIL,aAAJ,EAFuB;AAG9BM,EAAAA,iBAAiB,EAAE;AAHW,CAAjB,CAAf;AAMA,IAAMC,KAAK,GAAG,EAAd;AAEAC,YAAY,CACTC,KADH,CACS;AACLA,EAAAA,KAAK,EAAEP,GAAF;AADA,CADT,EAiBGQ,IAjBH,CAiBQ,UAAAC,QAAQ;AAAA,SACZJ,KAAK,CAACK,IAAN,CACED,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBC,OAApB,CAA4B,CAA5B,EAA+BC,GADjC,EAEEL,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBG,OAApB,CAA4B,CAA5B,EAA+BD,GAFjC,CADY;AAAA,CAjBhB,WAuBS,UAAAE,GAAG;AAAA,SAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAJ;AAAA,CAvBZ;AAyBA,SAASX,KAAT;AACA,OAAO,IAAMc,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;AAAA,SAAWf,KAAK,CAACe,KAAK,GAAGf,KAAK,CAACgB,MAAf,CAAhB;AAAA,CAArB","sourcesContent":["import { useQuery } from '@apollo/client';\nimport { InMemoryCache } from '@apollo/client/cache';\nimport { ApolloClient } from '@apollo/client/core';\nimport gql from 'graphql-tag';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:1337/graphql',\n  cache: new InMemoryCache(),\n  connectToDevTools: true,\n});\n\nconst media = [];\n\ncreateClient\n  .query({\n    query: gql`\n      {\n        mPage {\n          image_1 {\n            id\n            url\n          }\n          image_2 {\n            id\n            url\n          }\n        }\n      }\n    `,\n  })\n  .then(response =>\n    media.push(\n      response.data.mPage.image_1[0].url,\n      response.data.mPage.image_2[0].url\n    )\n  )\n  .catch(err => console.error(err));\n\nexport { media };\nexport const mediaByIndex = (index) => media[index % media.length];\n"]},"metadata":{},"sourceType":"module"}