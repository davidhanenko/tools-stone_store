{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Files/Work/A2Z/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Volumes/Files/Work/A2Z/frontend/components/products/Products.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query PRODUCTS_CATEGORY($productsCategory: String!) {\\n    products(where: { product_title: $productsCategory }) {\\n      product_title\\n      category: product_categories {\\n        product_category\\n        id\\n        single: single_products(limit: 1) {\\n          image {\\n            url\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_PRODUCTS {\\n    products {\\n      id\\n      title: product_title\\n      category: product_categories(limit: 1) {\\n        single: single_products(limit: 1) {\\n          image {\\n            url\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { useState } from 'react';\nimport ServicesSlider from '../sliders/services-slider/ServicesSlider';\nimport { ProductsStyles, ProductItemStyles } from './ProductsStyles';\nvar ALL_PRODUCTS = gql(_templateObject());\nvar PRODUCTS_CATEGORY = gql(_templateObject2());\n\nfunction ProductItem(_ref) {\n  _s();\n\n  var _this = this;\n\n  var productsCategory = _ref.productsCategory;\n\n  var _useQuery = useQuery(PRODUCTS_CATEGORY, {\n    variables: {\n      productsCategory: productsCategory\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ProductItemStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: true,\n      children: productsCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), data.products[0].category.map(function (p) {\n      return /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: p.product_category\n      }, p.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProductItem, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductItem;\nexport default function Products(_ref2) {\n  _s2();\n\n  var _data$products;\n\n  var productsCategory = _ref2.productsCategory;\n\n  var _useQuery2 = useQuery(ALL_PRODUCTS),\n      data = _useQuery2.data,\n      error = _useQuery2.error,\n      loading = _useQuery2.loading;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 21\n  }, this);\n  var SLIDE_COUNT = data === null || data === void 0 ? void 0 : (_data$products = data.products) === null || _data$products === void 0 ? void 0 : _data$products.length;\n  var slides = Array.from(Array(SLIDE_COUNT).keys()); // func from Embla Carousel docs\n\n  var mediaByIndex = function mediaByIndex(index) {\n    return data === null || data === void 0 ? void 0 : data.products[index % (data === null || data === void 0 ? void 0 : data.products.length)];\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProductsStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"main-title\",\n      children: \"Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ServicesSlider, {\n      slides: slides,\n      mediaByIndex: mediaByIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), productsCategory && /*#__PURE__*/_jsxDEV(ProductItem, {\n      productsCategory: productsCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Products, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = Products;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProductItem\");\n$RefreshReg$(_c2, \"Products\");","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/components/products/Products.js"],"names":["gql","useQuery","useState","ServicesSlider","ProductsStyles","ProductItemStyles","ALL_PRODUCTS","PRODUCTS_CATEGORY","ProductItem","productsCategory","variables","data","error","loading","message","products","category","map","p","product_category","id","Products","SLIDE_COUNT","length","slides","Array","from","keys","mediaByIndex","index"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { useState } from 'react';\n\nimport ServicesSlider from '../sliders/services-slider/ServicesSlider';\n\nimport { ProductsStyles, ProductItemStyles } from './ProductsStyles';\n\nconst ALL_PRODUCTS = gql`\n  query ALL_PRODUCTS {\n    products {\n      id\n      title: product_title\n      category: product_categories(limit: 1) {\n        single: single_products(limit: 1) {\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst PRODUCTS_CATEGORY = gql`\n  query PRODUCTS_CATEGORY($productsCategory: String!) {\n    products(where: { product_title: $productsCategory }) {\n      product_title\n      category: product_categories {\n        product_category\n        id\n        single: single_products(limit: 1) {\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ProductItem({ productsCategory }) {\n  const { data, error, loading } = useQuery(PRODUCTS_CATEGORY, {\n    variables: {\n      productsCategory,\n    },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n\n  return (\n    <ProductItemStyles>\n      <h3 className>{productsCategory}</h3>\n      {data.products[0].category.map(p => (\n        <h4 key={p.id}>{p.product_category}</h4>\n      ))}\n    </ProductItemStyles>\n  );\n}\n\nexport default function Products({ productsCategory }) {\n  const { data, error, loading } = useQuery(ALL_PRODUCTS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  const SLIDE_COUNT = data?.products?.length;\n  const slides = Array.from(Array(SLIDE_COUNT).keys());\n  // func from Embla Carousel docs\n  const mediaByIndex = index => data?.products[index % data?.products.length];\n\n  return (\n    <ProductsStyles>\n      <h2 className='main-title'>Products</h2>\n      <ServicesSlider slides={slides} mediaByIndex={mediaByIndex} />\n      {productsCategory && <ProductItem productsCategory={productsCategory} />}\n    </ProductsStyles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}