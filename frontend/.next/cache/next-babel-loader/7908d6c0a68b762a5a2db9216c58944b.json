{"ast":null,"code":"import { useState, useRef, useEffect, useCallback } from 'react';\nexport const useRecursiveTimeout = (callback, delay) => {\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState(false);\n  const stop = useCallback(() => setIsRunning(false), [setIsRunning]);\n  const play = useCallback(() => setIsRunning(true), [setIsRunning]);\n  const savedCallback = useRef(callback);\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    if (!isRunning) return;\n    let id = 0;\n\n    const tick = () => {\n      if (!isRunning) return clearTimeout(id);\n      savedCallback.current();\n      requestAnimationFrame(() => id = setTimeout(tick, delay));\n    };\n\n    requestAnimationFrame(() => id = setTimeout(tick, delay));\n    return () => {\n      if (id) clearTimeout(id);\n      stop();\n    };\n  }, [isRunning, delay, stop]);\n  return {\n    play,\n    stop\n  };\n};","map":{"version":3,"sources":["/Volumes/Files/tools-stone_store/frontend/lib/useRecursiveTimeout.js"],"names":["useState","useRef","useEffect","useCallback","useRecursiveTimeout","callback","delay","isRunning","setIsRunning","stop","play","savedCallback","current","id","tick","clearTimeout","requestAnimationFrame","setTimeout"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,EAAsCC,WAAtC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACtD,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMS,IAAI,GAAGN,WAAW,CAAC,MAAMK,YAAY,CAAC,KAAD,CAAnB,EAA4B,CAACA,YAAD,CAA5B,CAAxB;AACA,QAAME,IAAI,GAAGP,WAAW,CAAC,MAAMK,YAAY,CAAC,IAAD,CAAnB,EAA2B,CAACA,YAAD,CAA3B,CAAxB;AACA,QAAMG,aAAa,GAAGV,MAAM,CAACI,QAAD,CAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,aAAa,CAACC,OAAd,GAAwBP,QAAxB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACK,SAAL,EAAgB;AAChB,QAAIM,EAAE,GAAG,CAAT;;AAEA,UAAMC,IAAI,GAAG,MAAM;AACjB,UAAI,CAACP,SAAL,EAAgB,OAAOQ,YAAY,CAACF,EAAD,CAAnB;AAChBF,MAAAA,aAAa,CAACC,OAAd;AACAI,MAAAA,qBAAqB,CAAC,MAAOH,EAAE,GAAGI,UAAU,CAACH,IAAD,EAAOR,KAAP,CAAvB,CAArB;AACD,KAJD;;AAKAU,IAAAA,qBAAqB,CAAC,MAAOH,EAAE,GAAGI,UAAU,CAACH,IAAD,EAAOR,KAAP,CAAvB,CAArB;AAEA,WAAO,MAAM;AACX,UAAIO,EAAJ,EAAQE,YAAY,CAACF,EAAD,CAAZ;AACRJ,MAAAA,IAAI;AACL,KAHD;AAID,GAfQ,EAeN,CAACF,SAAD,EAAYD,KAAZ,EAAmBG,IAAnB,CAfM,CAAT;AAiBA,SAAO;AAAEC,IAAAA,IAAF;AAAQD,IAAAA;AAAR,GAAP;AACD,CA5BM","sourcesContent":["import { useState, useRef, useEffect, useCallback } from 'react';\n\nexport const useRecursiveTimeout = (callback, delay) => {\n  const [isRunning, setIsRunning] = useState(false);\n  const stop = useCallback(() => setIsRunning(false), [setIsRunning]);\n  const play = useCallback(() => setIsRunning(true), [setIsRunning]);\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (!isRunning) return;\n    let id = 0;\n\n    const tick = () => {\n      if (!isRunning) return clearTimeout(id);\n      savedCallback.current();\n      requestAnimationFrame(() => (id = setTimeout(tick, delay)));\n    };\n    requestAnimationFrame(() => (id = setTimeout(tick, delay)));\n\n    return () => {\n      if (id) clearTimeout(id);\n      stop();\n    };\n  }, [isRunning, delay, stop]);\n\n  return { play, stop };\n};\n"]},"metadata":{},"sourceType":"module"}