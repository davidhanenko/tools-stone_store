{"ast":null,"code":"import _objectDestructuringEmpty from \"/Volumes/Files/Work/A2Z/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport _taggedTemplateLiteral from \"/Volumes/Files/Work/A2Z/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Volumes/Files/Work/A2Z/frontend/pages/products/index.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query PRODUCTS_PAGE_QUERY($service: String) {\\n    services(where: { service: $service }) {\\n      items {\\n        id\\n        title\\n        category: items_categories(limit: 4) {\\n          id\\n          single_item: single_items(limit: 1) {\\n            item_title\\n            image {\\n              url\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Items from '../../components/items/items-page/items/Items';\nvar PRODUCTS_PAGE_QUERY = gql(_templateObject());\nexport default function ProductsPage(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useQuery = useQuery(PRODUCTS_PAGE_QUERY, {\n    variables: {\n      service: 'products'\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 21\n  }, this);\n  var allProducts = data === null || data === void 0 ? void 0 : data.services[0].items;\n  return /*#__PURE__*/_jsxDEV(Items, {\n    allServiceItems: allProducts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ProductsPage, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsPage\");","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/pages/products/index.js"],"names":["gql","useQuery","Items","PRODUCTS_PAGE_QUERY","ProductsPage","variables","service","data","error","loading","message","allProducts","services","items"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAGA,OAAOC,KAAP,MAAkB,+CAAlB;AAGA,IAAMC,mBAAmB,GAAGH,GAAH,mBAAzB;AAoBA,eAAe,SAASI,YAAT,OAA0B;AAAA;;AAAA;;AAAA,kBACNH,QAAQ,CAACE,mBAAD,EAAsB;AAC7DE,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE;AADA;AADkD,GAAtB,CADF;AAAA,MAC/BC,IAD+B,aAC/BA,IAD+B;AAAA,MACzBC,KADyB,aACzBA,KADyB;AAAA,MAClBC,OADkB,aAClBA,OADkB;;AAOvC,MAAIA,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,MAAMC,WAAW,GAAGJ,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEK,QAAN,CAAe,CAAf,EAAkBC,KAAtC;AAEA,sBAAO,QAAC,KAAD;AAAO,IAAA,eAAe,EAAEF;AAAxB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAbuBP,Y;UACWH,Q;;;KADXG,Y","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\n\nimport Items from '../../components/items/items-page/items/Items';\n\n\nconst PRODUCTS_PAGE_QUERY = gql`\n  query PRODUCTS_PAGE_QUERY($service: String) {\n    services(where: { service: $service }) {\n      items {\n        id\n        title\n        category: items_categories(limit: 4) {\n          id\n          single_item: single_items(limit: 1) {\n            item_title\n            image {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ProductsPage({}) {\n  const { data, error, loading } = useQuery(PRODUCTS_PAGE_QUERY, {\n    variables: {\n      service: 'products',\n    },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  const allProducts = data?.services[0].items;\n\n  return <Items allServiceItems={allProducts} />;\n}\n"]},"metadata":{},"sourceType":"module"}