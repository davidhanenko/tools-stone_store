{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/Files/Work/A2Z/frontend/pages/products/[products].js/index.js\";\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Items from '../../../components/items/items-page/Items';\nimport bg_1 from '../../../public/img/bg_1.jpg';\nconst ALL_PRODUCTS = gql`\n  query ALL_PRODUCTS {\n    products {\n      id\n      title: product_title\n      category: product_categories(limit: 1) {\n        single_item: single_products(limit: 1) {\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function ProductsCategoryPage({\n  query\n}) {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(ALL_PRODUCTS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 21\n  }, this);\n  const products = data.products;\n  console.log(query);\n  return /*#__PURE__*/_jsxDEV(Items, {\n    itemsCategory: query.products,\n    products: products\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/pages/products/[products].js/index.js"],"names":["gql","useQuery","Items","bg_1","ALL_PRODUCTS","ProductsCategoryPage","query","data","error","loading","message","products","console","log"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,KAAP,MAAkB,4CAAlB;AAEA,OAAOC,IAAP,MAAiB,8BAAjB;AAEA,MAAMC,YAAY,GAAGJ,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAgBA,eAAe,SAASK,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAAyC;AAEtD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BR,QAAQ,CAACG,YAAD,CAAzC;AAEA,MAAIK,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIX,QAAMC,QAAQ,GAAGJ,IAAI,CAACI,QAAtB;AACFC,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACE,sBACE,QAAC,KAAD;AACE,IAAA,aAAa,EAAEA,KAAK,CAACK,QADvB;AAEE,IAAA,QAAQ,EAAEA;AAFZ;AAAA;AAAA;AAAA;AAAA,UADF;AAMD","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\nimport Items from '../../../components/items/items-page/Items';\n\nimport bg_1 from '../../../public/img/bg_1.jpg'\n\nconst ALL_PRODUCTS = gql`\n  query ALL_PRODUCTS {\n    products {\n      id\n      title: product_title\n      category: product_categories(limit: 1) {\n        single_item: single_products(limit: 1) {\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ProductsCategoryPage({ query }) {\n  \n  const { data, error, loading } = useQuery(ALL_PRODUCTS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n\n\n  const products = data.products;\nconsole.log(query)\n  return (\n    <Items\n      itemsCategory={query.products}\n      products={products}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}