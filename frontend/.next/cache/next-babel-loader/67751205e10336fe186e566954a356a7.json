{"ast":null,"code":"import { useState, useRef, useEffect, useCallback } from 'react';\nexport const useRecursiveTimeout = (callback, delay) => {\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState(false);\n  const stop = useCallback(() => setIsRunning(false), [setIsRunning]);\n  const play = useCallback(() => setIsRunning(true), [setIsRunning]);\n  const savedCallback = useRef(callback);\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    if (!isRunning) return;\n    let id = 0;\n\n    const tick = () => {\n      if (!isRunning) return clearTimeout(id);\n      savedCallback.current();\n      requestAnimationFrame(() => id = setTimeout(tick, delay));\n    };\n\n    requestAnimationFrame(() => id = setTimeout(tick, delay));\n    return () => {\n      if (id) clearTimeout(id);\n      stop();\n    };\n  }, [isRunning, delay, stop]);\n  return {\n    play,\n    stop\n  };\n};","map":null,"metadata":{},"sourceType":"module"}