{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination'; // READ => MERGE => READ\n\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    // tells Apollo we will take care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      // console.log(existing, args, cache);\n      var skip = args.skip,\n          first = args.first; // Read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // Check if we have existing values & filter undefined values\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      }); // if we are on the last page or there are not enought items to fill the page, just send what we have\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We don't habe any items, we must go to the network to fetch them\n        return false;\n      } // if there are items - just return them from cashe\n\n\n      if (items.length) {\n        // console.log(\n        //   `There are ${items.length} items in the cache. Gonna send them to apollo`\n        // );\n        return items;\n      }\n\n      return false; // falback to network\n      // First thing it does, it asks the read function for those items\n      // Wecan do 2 things:\n      // 1st - return the items because they are already in the cache\n      // 2nd - return false from here (network requestr)\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      // This runs when the Apollo client comes back from the network with our products\n      var skip = args.skip,\n          first = args.first;\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      } // console.log(merged);\n      // Finally we return merged items from cache\n\n\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC,C,CAEA;;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AACW;AAChBC,IAAAA,IAFK,kBAEgC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACnC;AADmC,UAE3BC,IAF2B,GAEXF,IAFW,CAE3BE,IAF2B;AAAA,UAErBC,KAFqB,GAEXH,IAFW,CAErBG,KAFqB,EAInC;;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARmC,CAUnC;;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd,CAXmC,CAanC;;AACA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC5D,eAAOG,KAAP;AACD;;AAED,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OArBkC,CAuBnC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChB;AACA;AACA;AACA,eAAOJ,KAAP;AACD;;AAED,aAAO,KAAP,CA/BmC,CA+BrB;AAEd;AACA;AACA;AACA;AACD,KAvCI;AAwCLK,IAAAA,KAxCK,iBAwCCnB,QAxCD,EAwCWoB,QAxCX,SAwC+B;AAAA,UAARnB,IAAQ,SAARA,IAAQ;AAClC;AADkC,UAG1BE,IAH0B,GAGVF,IAHU,CAG1BE,IAH0B;AAAA,UAGpBC,KAHoB,GAGVH,IAHU,CAGpBG,KAHoB;AAKlC,UAAMiB,MAAM,GAAGrB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AAEA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEI,CAAjD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACD,OATiC,CAWlC;AACA;;;AACA,aAAOkB,MAAP;AACD;AAtDI,GAAP;AAwDD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\n// READ => MERGE => READ\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // tells Apollo we will take care of everything\n    read(existing = [], { args, cache }) {\n      // console.log(existing, args, cache);\n      const { skip, first } = args;\n\n      // Read the number of items on the page from the cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // Check if we have existing values & filter undefined values\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n\n      // if we are on the last page or there are not enought items to fill the page, just send what we have\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We don't habe any items, we must go to the network to fetch them\n        return false;\n      }\n\n      // if there are items - just return them from cashe\n      if (items.length) {\n        // console.log(\n        //   `There are ${items.length} items in the cache. Gonna send them to apollo`\n        // );\n        return items;\n      }\n\n      return false; // falback to network\n\n      // First thing it does, it asks the read function for those items\n      // Wecan do 2 things:\n      // 1st - return the items because they are already in the cache\n      // 2nd - return false from here (network requestr)\n    },\n    merge(existing, incoming, { args }) {\n      // This runs when the Apollo client comes back from the network with our products\n\n      const { skip, first } = args;\n\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      // console.log(merged);\n      // Finally we return merged items from cache\n      return merged;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}