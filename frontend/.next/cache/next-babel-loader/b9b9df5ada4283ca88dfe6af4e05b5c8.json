{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Files/Work/A2Z/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Volumes/Files/Work/A2Z/frontend/pages/products/[products]/index.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_PRODUCTS($service: String!, $itemsCategory: String!) {\\n    services(where: { service: $service }) {\\n      service\\n      items(where: { items: $itemsCategory }) {\\n        items\\n        category: items_categories {\\n          category_title\\n          id\\n          single_item: single_items(limit: 1) {\\n            item_title\\n            image {\\n              url\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport ItemsByCategory from '../../../components/items/items-page/items-by-category/ItemsByCategory';\nimport { formatUrlToDbName } from '../../../helpers/formatUrl';\nvar ALL_PRODUCTS = gql(_templateObject());\nexport default function ProductsCategoryPage(_ref) {\n  _s();\n\n  var _data$services;\n\n  var query = _ref.query;\n\n  var _useQuery = useQuery(ALL_PRODUCTS, {\n    variables: {\n      service: 'products',\n      itemsCategory: formatUrlToDbName(query.products)\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 21\n  }, this);\n  var items = data === null || data === void 0 ? void 0 : (_data$services = data.services) === null || _data$services === void 0 ? void 0 : _data$services.items[0];\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(ItemsByCategory, {\n    items: items\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ProductsCategoryPage, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsCategoryPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsCategoryPage\");","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/pages/products/[products]/index.js"],"names":["gql","useQuery","ItemsByCategory","formatUrlToDbName","ALL_PRODUCTS","ProductsCategoryPage","query","variables","service","itemsCategory","products","data","error","loading","message","items","services","console","log"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,eAAP,MAA4B,wEAA5B;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AAEA,IAAMC,YAAY,GAAGJ,GAAH,mBAAlB;AAqBA,eAAe,SAASK,oBAAT,OAAyC;AAAA;;AAAA;;AAAA,MAATC,KAAS,QAATA,KAAS;;AAAA,kBACrBL,QAAQ,CAACG,YAAD,EAAe;AACtDG,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE,UADA;AAETC,MAAAA,aAAa,EAAEN,iBAAiB,CAACG,KAAK,CAACI,QAAP;AAFvB;AAD2C,GAAf,CADa;AAAA,MAC9CC,IAD8C,aAC9CA,IAD8C;AAAA,MACxCC,KADwC,aACxCA,KADwC;AAAA,MACjCC,OADiC,aACjCA,OADiC;;AAStD,MAAIA,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,MAAMC,KAAK,GAAGJ,IAAH,aAAGA,IAAH,yCAAGA,IAAI,CAAEK,QAAT,mDAAG,eAAgBD,KAAhB,CAAsB,CAAtB,CAAd;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AAEA,sBAAO,QAAC,eAAD;AAAiB,IAAA,KAAK,EAAEI;AAAxB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAhBuBV,oB;UACWJ,Q;;;KADXI,oB","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\nimport ItemsByCategory from '../../../components/items/items-page/items-by-category/ItemsByCategory';\nimport { formatUrlToDbName } from '../../../helpers/formatUrl';\n\nconst ALL_PRODUCTS = gql`\n  query ALL_PRODUCTS($service: String!, $itemsCategory: String!) {\n    services(where: { service: $service }) {\n      service\n      items(where: { items: $itemsCategory }) {\n        items\n        category: items_categories {\n          category_title\n          id\n          single_item: single_items(limit: 1) {\n            item_title\n            image {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ProductsCategoryPage({ query }) {\n  const { data, error, loading } = useQuery(ALL_PRODUCTS, {\n    variables: {\n      service: 'products',\n      itemsCategory: formatUrlToDbName(query.products)\n    },\n  });\n\n  \n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n  \n  const items = data?.services?.items[0];\n  console.log(data);\n\n  return <ItemsByCategory items={items} />;\n}\n"]},"metadata":{},"sourceType":"module"}