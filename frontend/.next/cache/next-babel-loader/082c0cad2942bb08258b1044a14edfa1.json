{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/Files/Work/A2Z/frontend/components/products/Products.js\";\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { useState } from 'react';\nimport ServicesSlider from '../sliders/services-slider/ServicesSlider';\nimport { ProductsStyles, ProductItemStyles } from './ProductsStyles';\nconst ALL_PRODUCTS = gql`\n  query ALL_PRODUCTS {\n    products {\n      id\n      title: product_title\n      category: product_categories(limit: 1) {\n        single: single_products(limit: 1) {\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\nconst PRODUCTS_CATEGORY = gql`\n  query PRODUCTS_CATEGORY($productsCategory: String!) {\n    products(where: { product_title: $productsCategory }) {\n      product_title\n      category: product_categories {\n        product_category\n        id\n        single: single_products(limit: 1) {\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ProductItem({\n  productsCategory\n}) {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(PRODUCTS_CATEGORY, {\n    variables: {\n      productsCategory\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ProductItemStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: true,\n      children: productsCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), data.products[0].category.map(p => /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: p.product_category\n    }, p.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\nexport default function Products({\n  productsCategory\n}) {\n  var _data$products;\n\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(ALL_PRODUCTS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 21\n  }, this);\n  const SLIDE_COUNT = data === null || data === void 0 ? void 0 : (_data$products = data.products) === null || _data$products === void 0 ? void 0 : _data$products.length;\n  const slides = Array.from(Array(SLIDE_COUNT).keys()); // func from Embla Carousel docs\n\n  const mediaByIndex = index => data === null || data === void 0 ? void 0 : data.products[index % (data === null || data === void 0 ? void 0 : data.products.length)];\n\n  return /*#__PURE__*/_jsxDEV(ProductsStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"main-title\",\n      children: \"Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ServicesSlider, {\n      slides: slides,\n      mediaByIndex: mediaByIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), productsCategory && /*#__PURE__*/_jsxDEV(ProductItem, {\n      productsCategory: productsCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/components/products/Products.js"],"names":["gql","useQuery","useState","ServicesSlider","ProductsStyles","ProductItemStyles","ALL_PRODUCTS","PRODUCTS_CATEGORY","ProductItem","productsCategory","data","error","loading","variables","message","products","category","map","p","product_category","id","Products","SLIDE_COUNT","length","slides","Array","from","keys","mediaByIndex","index"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,cAAP,MAA2B,2CAA3B;AAEA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;AAEA,MAAMC,YAAY,GAAGN,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAgBA,MAAMO,iBAAiB,GAAGP,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;;AAiBA,SAASQ,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAA2C;AACzC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BX,QAAQ,CAACM,iBAAD,EAAoB;AAC3DM,IAAAA,SAAS,EAAE;AACTJ,MAAAA;AADS;AADgD,GAApB,CAAzC;AAMA,MAAIG,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAGX,sBACE,QAAC,iBAAD;AAAA,4BACE;AAAI,MAAA,SAAS,MAAb;AAAA,gBAAeL;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,IAAI,CAACK,QAAL,CAAc,CAAd,EAAiBC,QAAjB,CAA0BC,GAA1B,CAA8BC,CAAC,iBAC9B;AAAA,gBAAgBA,CAAC,CAACC;AAAlB,OAASD,CAAC,CAACE,EAAX;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,eAAe,SAASC,QAAT,CAAkB;AAAEZ,EAAAA;AAAF,CAAlB,EAAwC;AAAA;;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BX,QAAQ,CAACK,YAAD,CAAzC;AAEA,MAAIM,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,QAAMQ,WAAW,GAAGZ,IAAH,aAAGA,IAAH,yCAAGA,IAAI,CAAEK,QAAT,mDAAG,eAAgBQ,MAApC;AACA,QAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACH,WAAD,CAAL,CAAmBK,IAAnB,EAAX,CAAf,CAPqD,CAQrD;;AACA,QAAMC,YAAY,GAAGC,KAAK,IAAInB,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEK,QAAN,CAAec,KAAK,IAAGnB,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEK,QAAN,CAAeQ,MAAlB,CAApB,CAA9B;;AAEA,sBACE,QAAC,cAAD;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,cAAD;AAAgB,MAAA,MAAM,EAAEC,MAAxB;AAAgC,MAAA,YAAY,EAAEI;AAA9C;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGnB,gBAAgB,iBAAI,QAAC,WAAD;AAAa,MAAA,gBAAgB,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA,YAHvB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { useState } from 'react';\n\nimport ServicesSlider from '../sliders/services-slider/ServicesSlider';\n\nimport { ProductsStyles, ProductItemStyles } from './ProductsStyles';\n\nconst ALL_PRODUCTS = gql`\n  query ALL_PRODUCTS {\n    products {\n      id\n      title: product_title\n      category: product_categories(limit: 1) {\n        single: single_products(limit: 1) {\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst PRODUCTS_CATEGORY = gql`\n  query PRODUCTS_CATEGORY($productsCategory: String!) {\n    products(where: { product_title: $productsCategory }) {\n      product_title\n      category: product_categories {\n        product_category\n        id\n        single: single_products(limit: 1) {\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ProductItem({ productsCategory }) {\n  const { data, error, loading } = useQuery(PRODUCTS_CATEGORY, {\n    variables: {\n      productsCategory,\n    },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n\n  return (\n    <ProductItemStyles>\n      <h3 className>{productsCategory}</h3>\n      {data.products[0].category.map(p => (\n        <h4 key={p.id}>{p.product_category}</h4>\n      ))}\n    </ProductItemStyles>\n  );\n}\n\nexport default function Products({ productsCategory }) {\n  const { data, error, loading } = useQuery(ALL_PRODUCTS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  const SLIDE_COUNT = data?.products?.length;\n  const slides = Array.from(Array(SLIDE_COUNT).keys());\n  // func from Embla Carousel docs\n  const mediaByIndex = index => data?.products[index % data?.products.length];\n\n  return (\n    <ProductsStyles>\n      <h2 className='main-title'>Products</h2>\n      <ServicesSlider slides={slides} mediaByIndex={mediaByIndex} />\n      {productsCategory && <ProductItem productsCategory={productsCategory} />}\n    </ProductsStyles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}