{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useEmblaCarousel } from 'embla-carousel/react';\nimport { DotButton, PrevButton, NextButton } from '../SliderButtons';\nimport { useRecursiveTimeout } from '../../../../lib/useRecursiveTimeout';\nimport BannerSliderStyles from './BannerSliderStyles';\nimport Slide from './Slide';\nconst AUTOPLAY_INTERVAL = 4000;\n\nconst BannerSlider = ({\n  slides,\n  mediaByIndex\n}) => {\n  // animation state\n  const {\n    0: animation,\n    1: setAnimation\n  } = useState(false); // key state for slides\n\n  const {\n    0: carouselRandomNumber,\n    1: setCarouselRandomNumber\n  } = useState();\n  const [viewportRef, embla] = useEmblaCarousel({\n    loop: true,\n    skipSnaps: false,\n    speed: 8\n  });\n  const {\n    0: prevBtnEnabled,\n    1: setPrevBtnEnabled\n  } = useState(false);\n  const {\n    0: nextBtnEnabled,\n    1: setNextBtnEnabled\n  } = useState(false);\n  const {\n    0: selectedIndex,\n    1: setSelectedIndex\n  } = useState(0);\n  const {\n    0: scrollSnaps,\n    1: setScrollSnaps\n  } = useState([]);\n  const autoplay = useCallback(() => {\n    if (!embla) return;\n\n    if (embla.canScrollNext()) {\n      embla.scrollNext();\n      setCarouselRandomNumber(Math.random());\n      setAnimation(true);\n    } else {\n      embla.scrollTo(0);\n      setCarouselRandomNumber(Math.random());\n      setAnimation(true);\n    }\n  }, [embla]);\n  const {\n    play,\n    stop\n  } = useRecursiveTimeout(autoplay, AUTOPLAY_INTERVAL);\n  const scrollNext = useCallback(() => {\n    if (!embla) return;\n    setCarouselRandomNumber(Math.random());\n    embla.scrollNext();\n    stop();\n  }, [embla, stop]);\n  const scrollPrev = useCallback(() => {\n    if (!embla) return;\n    setCarouselRandomNumber(Math.random());\n    embla.scrollPrev();\n    stop();\n  }, [embla, stop]);\n  const scrollTo = useCallback(index => {\n    embla && embla.scrollTo(index), [embla];\n    setCarouselRandomNumber(Math.random());\n  });\n  const onSelect = useCallback(() => {\n    if (!embla) return;\n    setSelectedIndex(embla.selectedScrollSnap());\n    setPrevBtnEnabled(embla.canScrollPrev());\n    setNextBtnEnabled(embla.canScrollNext());\n  }, [embla, setSelectedIndex]);\n  useEffect(() => {\n    if (!embla) return;\n    onSelect();\n    setScrollSnaps(embla.scrollSnapList());\n    embla.on('select', onSelect);\n    embla.on('pointerDown', stop); // try to return if Embla don't\n  }, [embla, onSelect, setScrollSnaps, stop]);\n  useEffect(() => {\n    play();\n  }, [play]);\n  return /*#__PURE__*/_jsxs(BannerSliderStyles, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"embla__viewport\",\n      ref: viewportRef,\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"embla__container\",\n        children: slides.map(index => /*#__PURE__*/_jsx(\"div\", {\n          className: \"embla__slide\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"embla__slide__inner\",\n            children: /*#__PURE__*/_jsx(Slide, {\n              mediaByIndex: mediaByIndex,\n              index: index,\n              setAnimation: setAnimation,\n              animation: animation\n            }, `${index}+${selectedIndex === index ? carouselRandomNumber : index}`)\n          })\n        }, index))\n      })\n    }), /*#__PURE__*/_jsx(PrevButton, {\n      onClick: scrollPrev,\n      enabled: prevBtnEnabled\n    }), /*#__PURE__*/_jsx(NextButton, {\n      onClick: scrollNext,\n      enabled: nextBtnEnabled\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"embla__dots\",\n      children: scrollSnaps.map((_, index) => /*#__PURE__*/_jsx(DotButton, {\n        selected: index === selectedIndex,\n        onClick: () => scrollTo(index)\n      }, index))\n    })]\n  });\n};\n\nexport default BannerSlider;","map":null,"metadata":{},"sourceType":"module"}