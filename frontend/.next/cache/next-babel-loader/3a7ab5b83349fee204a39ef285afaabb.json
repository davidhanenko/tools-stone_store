{"ast":null,"code":"/* eslint-disable no-inner-declarations */\nimport { useState, useEffect } from 'react';\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, ...arguments);\n    }, ms);\n  };\n}\n\nexport default function useWindowDimensions() {\n  const hasWindow = false;\n\n  function getWindowDimensions() {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n    return {\n      width,\n      height\n    };\n  } // const [windowDimensions, setWindowDimensions] = useState({\n  //   width: undefined,\n  //   height: undefined,\n  // });\n\n\n  useEffect(() => {\n    const debouncedHandleResize = debounce(function handleResize() {\n      setWindowDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    }, 0);\n    window.addEventListener('resize', debouncedHandleResize);\n    return () => window.removeEventListener('resize', debouncedHandleResize);\n  }, []);\n  return windowDimensions;\n}","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/lib/windowDimensions.js"],"names":["useState","useEffect","debounce","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","useWindowDimensions","hasWindow","getWindowDimensions","width","window","innerWidth","height","innerHeight","debouncedHandleResize","handleResize","setWindowDimensions","addEventListener","removeEventListener","windowDimensions"],"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,QAAT,CAAkBC,EAAlB,EAAsBC,EAAtB,EAA0B;AACxB,MAAIC,KAAJ;AACA,SAAQC,CAAD,IAAO;AACZC,IAAAA,YAAY,CAACF,KAAD,CAAZ;AACAA,IAAAA,KAAK,GAAGG,UAAU,CAAEF,CAAD,IAAO;AACxBD,MAAAA,KAAK,GAAG,IAAR;AACAF,MAAAA,EAAE,CAACM,KAAH,CAAS,IAAT,EAAe,GAAGC,SAAlB;AACD,KAHiB,EAGfN,EAHe,CAAlB;AAID,GAND;AAOD;;AAED,eAAe,SAASO,mBAAT,GAA+B;AAC5C,QAAMC,SAAS,QAAf;;AAEA,WAASC,mBAAT,GAA+B;AAC7B,UAAMC,KAAK,GAAGF,SAAS,GAAGG,MAAM,CAACC,UAAV,GAAuB,IAA9C;AACA,UAAMC,MAAM,GAAGL,SAAS,GAAGG,MAAM,CAACG,WAAV,GAAwB,IAAhD;AACA,WAAO;AACLJ,MAAAA,KADK;AAELG,MAAAA;AAFK,KAAP;AAID,GAV2C,CAY5C;AACA;AACA;AACA;;;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,qBAAqB,GAAGjB,QAAQ,CAAC,SAASkB,YAAT,GAAwB;AAC7DC,MAAAA,mBAAmB,CAAC;AAClBP,QAAAA,KAAK,EAAEC,MAAM,CAACC,UADI;AAElBC,QAAAA,MAAM,EAAEF,MAAM,CAACG;AAFG,OAAD,CAAnB;AAID,KALqC,EAKnC,CALmC,CAAtC;AAOAH,IAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCH,qBAAlC;AACA,WAAO,MAAMJ,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCJ,qBAArC,CAAb;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAOK,gBAAP;AACD","sourcesContent":["/* eslint-disable no-inner-declarations */\nimport { useState, useEffect } from 'react';\n\nfunction debounce(fn, ms) {\n  let timer;\n  return (_) => {\n    clearTimeout(timer);\n    timer = setTimeout((_) => {\n      timer = null;\n      fn.apply(this, ...arguments);\n    }, ms);\n  };\n}\n\nexport default function useWindowDimensions() {\n  const hasWindow = typeof window !== 'undefined';\n\n  function getWindowDimensions() {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n    return {\n      width,\n      height,\n    };\n  }\n\n  // const [windowDimensions, setWindowDimensions] = useState({\n  //   width: undefined,\n  //   height: undefined,\n  // });\n\n  useEffect(() => {\n    const debouncedHandleResize = debounce(function handleResize() {\n      setWindowDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }, 0);\n\n    window.addEventListener('resize', debouncedHandleResize);\n    return () => window.removeEventListener('resize', debouncedHandleResize);\n  }, []);\n\n  return windowDimensions;\n}\n"]},"metadata":{},"sourceType":"module"}