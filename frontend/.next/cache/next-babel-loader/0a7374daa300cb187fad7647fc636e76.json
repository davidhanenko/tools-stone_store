{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Files/Work/A2Z/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Volumes/Files/Work/A2Z/frontend/pages/products/[products]/index.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_PRODUCTS($itemsCategory: String!) {\\n    products(where: { product_title: $itemsCategory }) {\\n      product_title\\n      category: items_categories {\\n        category_title: category_title\\n        id\\n        single_item: single_items(limit: 1) {\\n          item_title\\n          image {\\n            url\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Items from '../../../components/items/items-page/Items';\nimport { formatUrlToDbName } from '../../../lib/formatUrl';\nvar ALL_PRODUCTS = gql(_templateObject());\nexport default function ProductsCategoryPage(_ref) {\n  _s();\n\n  var query = _ref.query;\n\n  var _useQuery = useQuery(ALL_PRODUCTS, {\n    variables: {\n      itemsCategory: formatUrlToDbName(query.products)\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 21\n  }, this);\n  var products = data.products;\n  return /*#__PURE__*/_jsxDEV(Items, {\n    items: products[0]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ProductsCategoryPage, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsCategoryPage;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsCategoryPage\");","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/pages/products/[products]/index.js"],"names":["gql","useQuery","Items","formatUrlToDbName","ALL_PRODUCTS","ProductsCategoryPage","query","variables","itemsCategory","products","data","error","loading","message"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AAGA,IAAMC,YAAY,GAAGJ,GAAH,mBAAlB;AAkBA,eAAe,SAASK,oBAAT,OAAyC;AAAA;;AAAA,MAATC,KAAS,QAATA,KAAS;;AAAA,kBACrBL,QAAQ,CAACG,YAAD,EAAe;AACtDG,IAAAA,SAAS,EAAE;AACTC,MAAAA,aAAa,EAAEL,iBAAiB,CAACG,KAAK,CAACG,QAAP;AADvB;AAD2C,GAAf,CADa;AAAA,MAC9CC,IAD8C,aAC9CA,IAD8C;AAAA,MACxCC,KADwC,aACxCA,KADwC;AAAA,MACjCC,OADiC,aACjCA,OADiC;;AAOtD,MAAIA,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,MAAMJ,QAAQ,GAAGC,IAAI,CAACD,QAAtB;AAEA,sBAAO,QAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,QAAQ,CAAC,CAAD;AAAtB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAbuBJ,oB;UACWJ,Q;;;KADXI,oB;AAavB","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\nimport Items from '../../../components/items/items-page/Items';\nimport { formatUrlToDbName } from '../../../lib/formatUrl';\n\n\nconst ALL_PRODUCTS = gql`\n  query ALL_PRODUCTS($itemsCategory: String!) {\n    products(where: { product_title: $itemsCategory }) {\n      product_title\n      category: items_categories {\n        category_title: category_title\n        id\n        single_item: single_items(limit: 1) {\n          item_title\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ProductsCategoryPage({ query }) {\n  const { data, error, loading } = useQuery(ALL_PRODUCTS, {\n    variables: {\n      itemsCategory: formatUrlToDbName(query.products),\n    },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  const products = data.products;\n\n  return <Items items={products[0]} />;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}