{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { MdExpandMore, MdExpandLess } from 'react-icons/md';\nimport { useMenu } from '../../context/menuState';\nimport useWindowDimensions from '../../lib/windowDimensions';\nimport { formatUrlToRoute } from '../../helpers/formatUrl';\nimport { DropdownStyles, DropdownBtnStyles, DropdownItemStyles, DropdownMenuStyles } from './MenuDropdownStyles';\nvar DropdownItem = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var href = _ref.href,\n      onClick = _ref.onClick,\n      item = _ref.item,\n      setDropdownOpen = _ref.setDropdownOpen;\n\n  var _useMenu = useMenu(),\n      closeMenu = _useMenu.closeMenu;\n\n  return /*#__PURE__*/_jsx(DropdownItemStyles, {\n    children: /*#__PURE__*/_jsx(\"a\", {\n      href: href,\n      onClick: function onClick() {\n        closeMenu();\n        setDropdownOpen(false);\n      },\n      ref: ref,\n      children: item\n    })\n  });\n});\nvar MenuDropdown = /*#__PURE__*/React.forwardRef(function MenuDropdown(props, ref) {\n  var _props$categories;\n\n  var _useState = useState(false),\n      dropdownOpen = _useState[0],\n      setDropdownOpen = _useState[1];\n\n  var _useMenu2 = useMenu(),\n      isOpen = _useMenu2.isOpen,\n      setOpen = _useMenu2.setOpen;\n\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width;\n\n  var router = useRouter();\n\n  var showDropdown = function showDropdown() {\n    return setDropdownOpen(!dropdownOpen);\n  };\n\n  var mouseEnter = function mouseEnter() {\n    !isOpen && setDropdownOpen(true);\n  };\n\n  var mouseLeave = function mouseLeave() {\n    !isOpen && setDropdownOpen(false);\n  };\n\n  useEffect(function () {\n    var isMounted = true;\n\n    if (width >= 850) {\n      setOpen(false);\n    }\n\n    return function () {\n      isMounted = false;\n    };\n  }, [width]);\n  return /*#__PURE__*/_jsxs(DropdownStyles, {\n    onMouseOver: mouseEnter,\n    onMouseLeave: mouseLeave,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"dropdown-btns-group\",\n      children: [/*#__PURE__*/_jsx(\"a\", {\n        href: props.href,\n        ref: ref,\n        className: formatUrlToRoute(router.asPath.split('/')[2]) == formatUrlToRoute(props.dropDownMenuitem) ? 'active link-title' : 'link-title',\n        children: props.dropDownMenuitem\n      }), /*#__PURE__*/_jsx(DropdownBtnStyles, {\n        type: \"button\",\n        onClick: showDropdown,\n        disabled: !isOpen || width > 850,\n        children: dropdownOpen && isOpen ? /*#__PURE__*/_jsx(MdExpandLess, {}) : /*#__PURE__*/_jsx(MdExpandMore, {})\n      })]\n    }), /*#__PURE__*/_jsx(DropdownMenuStyles, {\n      dropdownOpen: dropdownOpen,\n      children: props === null || props === void 0 ? void 0 : (_props$categories = props.categories) === null || _props$categories === void 0 ? void 0 : _props$categories.map(function (category) {\n        return /*#__PURE__*/_jsx(Link, {\n          href: {\n            pathname: '/products/[items]/[collection]',\n            query: {\n              items: \"\".concat(formatUrlToRoute(props.dropDownMenuitem)),\n              collection: \"\".concat(formatUrlToRoute(category.category))\n            }\n          },\n          passHref: true,\n          children: /*#__PURE__*/_jsx(DropdownItem, {\n            item: category === null || category === void 0 ? void 0 : category.category,\n            setDropdownOpen: setDropdownOpen\n          })\n        }, category.id);\n      })\n    })]\n  });\n});\nexport default MenuDropdown;","map":null,"metadata":{},"sourceType":"module"}