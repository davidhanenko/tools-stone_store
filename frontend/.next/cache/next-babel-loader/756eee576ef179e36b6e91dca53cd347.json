{"ast":null,"code":"/* eslint-disable no-inner-declarations */\nimport { useState, useEffect } from 'react';\nexport default function useWindowDimensions() {\n  const hasWindow = false;\n\n  function getWindowDimensions() {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n    return {\n      width,\n      height\n    };\n  }\n\n  const {\n    0: windowDimensions,\n    1: setWindowDimensions\n  } = useState(getWindowDimensions()); // useEffect(() => {\n  //   if (hasWindow) {\n  //     function handleResize() {\n  //       setWindowDimensions(getWindowDimensions());\n  //     }\n  //     window.addEventListener('resize', handleResize);\n  //     return () => window.removeEventListener('resize', handleResize);\n  //   }\n  // }, [hasWindow]);\n\n  return windowDimensions;\n}","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/lib/windowDimensions.js"],"names":["useState","useEffect","useWindowDimensions","hasWindow","getWindowDimensions","width","window","innerWidth","height","innerHeight","windowDimensions","setWindowDimensions"],"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,mBAAT,GAA+B;AAC5C,QAAMC,SAAS,QAAf;;AAEA,WAASC,mBAAT,GAA+B;AAC7B,UAAMC,KAAK,GAAGF,SAAS,GAAGG,MAAM,CAACC,UAAV,GAAuB,IAA9C;AACA,UAAMC,MAAM,GAAGL,SAAS,GAAGG,MAAM,CAACG,WAAV,GAAwB,IAAhD;AACA,WAAO;AACLJ,MAAAA,KADK;AAELG,MAAAA;AAFK,KAAP;AAID;;AAED,QAAM;AAAA,OAACE,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CX,QAAQ,CACtDI,mBAAmB,EADmC,CAAxD,CAZ4C,CAgB5C;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,SAAOM,gBAAP;AACD","sourcesContent":["/* eslint-disable no-inner-declarations */\nimport { useState, useEffect } from 'react';\n\nexport default function useWindowDimensions() {\n  const hasWindow = typeof window !== 'undefined';\n\n  function getWindowDimensions() {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n    return {\n      width,\n      height,\n    };\n  }\n\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  // useEffect(() => {\n  //   if (hasWindow) {\n  //     function handleResize() {\n  //       setWindowDimensions(getWindowDimensions());\n  //     }\n\n  //     window.addEventListener('resize', handleResize);\n  //     return () => window.removeEventListener('resize', handleResize);\n  //   }\n  // }, [hasWindow]);\n\n  return windowDimensions;\n}\n"]},"metadata":{},"sourceType":"module"}