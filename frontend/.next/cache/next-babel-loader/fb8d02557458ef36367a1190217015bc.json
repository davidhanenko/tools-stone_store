{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Files/Work/A2Z/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Volumes/Files/Work/A2Z/frontend/pages/products/[products].js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_PRODUCTS {\\n    products {\\n      id\\n      title: product_title\\n      category: product_categories(limit: 1) {\\n        single: single_products(limit: 1) {\\n          image {\\n            url\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Items from '../../components/items/items-page/Items';\nvar ALL_PRODUCTS = gql(_templateObject());\nexport default function ProductsCategoryPage(_ref) {\n  _s();\n\n  var _data$products;\n\n  var query = _ref.query;\n\n  var _useQuery = useQuery(ALL_PRODUCTS),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 21\n  }, this);\n  console.log(data);\n  var SLIDE_COUNT = data === null || data === void 0 ? void 0 : (_data$products = data.products) === null || _data$products === void 0 ? void 0 : _data$products.length;\n  var slides = Array.from(Array(SLIDE_COUNT).keys()); // func from Embla Carousel docs\n\n  var itemsByIndex = function itemsByIndex(index) {\n    return data === null || data === void 0 ? void 0 : data.products[index % (data === null || data === void 0 ? void 0 : data.products.length)];\n  };\n\n  return /*#__PURE__*/_jsxDEV(Items, {\n    productsCategory: query.products,\n    itemsByIndex: itemsByIndex,\n    slides: slides\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProductsCategoryPage, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsCategoryPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsCategoryPage\");","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/pages/products/[products].js"],"names":["gql","useQuery","Items","ALL_PRODUCTS","ProductsCategoryPage","query","data","error","loading","message","console","log","SLIDE_COUNT","products","length","slides","Array","from","keys","itemsByIndex","index"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,KAAP,MAAkB,yCAAlB;AAEA,IAAMC,YAAY,GAAGH,GAAH,mBAAlB;AAgBA,eAAe,SAASI,oBAAT,OAAyC;AAAA;;AAAA;;AAAA,MAATC,KAAS,QAATA,KAAS;;AAAA,kBACrBJ,QAAQ,CAACE,YAAD,CADa;AAAA,MAC9CG,IAD8C,aAC9CA,IAD8C;AAAA,MACxCC,KADwC,aACxCA,KADwC;AAAA,MACjCC,OADiC,aACjCA,OADiC;;AAGtD,MAAIA,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACbC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACE,MAAMM,WAAW,GAAGN,IAAH,aAAGA,IAAH,yCAAGA,IAAI,CAAEO,QAAT,mDAAG,eAAgBC,MAApC;AACA,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACJ,WAAD,CAAL,CAAmBM,IAAnB,EAAX,CAAf,CAPsD,CAQtD;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK;AAAA,WAAId,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEO,QAAN,CAAeO,KAAK,IAAGd,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEO,QAAN,CAAeC,MAAlB,CAApB,CAAJ;AAAA,GAA1B;;AAEA,sBACE,QAAC,KAAD;AACE,IAAA,gBAAgB,EAAET,KAAK,CAACQ,QAD1B;AAEE,IAAA,YAAY,EAAEM,YAFhB;AAGE,IAAA,MAAM,EAAEJ;AAHV;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAlBuBX,oB;UACWH,Q;;;KADXG,oB","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\nimport Items from '../../components/items/items-page/Items';\n\nconst ALL_PRODUCTS = gql`\n  query ALL_PRODUCTS {\n    products {\n      id\n      title: product_title\n      category: product_categories(limit: 1) {\n        single: single_products(limit: 1) {\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ProductsCategoryPage({ query }) {\n  const { data, error, loading } = useQuery(ALL_PRODUCTS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\nconsole.log(data);\n  const SLIDE_COUNT = data?.products?.length;\n  const slides = Array.from(Array(SLIDE_COUNT).keys());\n  // func from Embla Carousel docs\n  const itemsByIndex = index => data?.products[index % data?.products.length];\n\n  return (\n    <Items\n      productsCategory={query.products}\n      itemsByIndex={itemsByIndex}\n      slides={slides}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}