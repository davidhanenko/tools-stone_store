{"ast":null,"code":"/* eslint-disable no-inner-declarations */\nimport { useState, useEffect } from 'react';\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, args);\n    }, ms);\n  };\n}\n\nexport default function useWindowDimensions() {\n  // const hasWindow = typeof window !== 'undefined';\n  function getWindowDimensions() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    return {\n      width,\n      height\n    };\n  }\n\n  const {\n    0: windowDimensions,\n    1: setWindowDimensions\n  } = useState(getWindowDimensions());\n  useEffect(() => {\n    if (hasWindow) {\n      const debouncedHandleResize = debounce(function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n      }, 0);\n      window.addEventListener('resize', debouncedHandleResize);\n      return () => window.removeEventListener('resize', debouncedHandleResize);\n    }\n  }, []);\n  return windowDimensions;\n}","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/lib/windowDimensions.js"],"names":["useState","useEffect","debounce","fn","ms","timer","_","clearTimeout","setTimeout","apply","args","useWindowDimensions","getWindowDimensions","width","window","innerWidth","height","innerHeight","windowDimensions","setWindowDimensions","hasWindow","debouncedHandleResize","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,QAAT,CAAkBC,EAAlB,EAAsBC,EAAtB,EAA0B;AACxB,MAAIC,KAAJ;AACA,SAAQC,CAAD,IAAO;AACZC,IAAAA,YAAY,CAACF,KAAD,CAAZ;AACAA,IAAAA,KAAK,GAAGG,UAAU,CAAEF,CAAD,IAAO;AACxBD,MAAAA,KAAK,GAAG,IAAR;AACAF,MAAAA,EAAE,CAACM,KAAH,CAAS,IAAT,EAAeC,IAAf;AACD,KAHiB,EAGfN,EAHe,CAAlB;AAID,GAND;AAOD;;AAED,eAAe,SAASO,mBAAT,GAA+B;AAC5C;AAEA,WAASC,mBAAT,GAA+B;AAC7B,UAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,UAAMC,MAAM,GAAGF,MAAM,CAACG,WAAtB;AACA,WAAO;AACLJ,MAAAA,KADK;AAELG,MAAAA;AAFK,KAAP;AAID;;AAED,QAAM;AAAA,OAACE,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CnB,QAAQ,CACtDY,mBAAmB,EADmC,CAAxD;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,SAAJ,EAAe;AACb,YAAMC,qBAAqB,GAAGnB,QAAQ,CAAC,SAASoB,YAAT,GAAwB;AAC7DH,QAAAA,mBAAmB,CAACP,mBAAmB,EAApB,CAAnB;AACD,OAFqC,EAEnC,CAFmC,CAAtC;AAIAE,MAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCF,qBAAlC;AACA,aAAO,MAAMP,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCH,qBAArC,CAAb;AACD;AACF,GATQ,EASN,EATM,CAAT;AAWA,SAAOH,gBAAP;AACD","sourcesContent":["/* eslint-disable no-inner-declarations */\nimport { useState, useEffect } from 'react';\n\nfunction debounce(fn, ms) {\n  let timer;\n  return (_) => {\n    clearTimeout(timer);\n    timer = setTimeout((_) => {\n      timer = null;\n      fn.apply(this, args);\n    }, ms);\n  };\n}\n\nexport default function useWindowDimensions() {\n  // const hasWindow = typeof window !== 'undefined';\n\n  function getWindowDimensions() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    return {\n      width,\n      height,\n    };\n  }\n\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    if (hasWindow) {\n      const debouncedHandleResize = debounce(function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n      }, 0);\n\n      window.addEventListener('resize', debouncedHandleResize);\n      return () => window.removeEventListener('resize', debouncedHandleResize);\n    }\n  }, []);\n\n  return windowDimensions;\n}\n"]},"metadata":{},"sourceType":"module"}