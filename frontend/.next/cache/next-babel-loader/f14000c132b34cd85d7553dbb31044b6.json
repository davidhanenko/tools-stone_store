{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/Files/Work/A2Z/frontend/components/Sliders/BannerSlider.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useEmblaCarousel } from 'embla-carousel/react';\nimport { DotButton, PrevButton, NextButton } from './CarouselButtons';\nimport { useRecursiveTimeout } from '../../lib/useRecursiveTimeout';\nimport CarouselStyles from './CarouselStyles';\nimport Slide from './Slide';\nconst AUTOPLAY_INTERVAL = 4000;\n\nconst EmblaCarousel = ({\n  slides,\n  mediaByIndex\n}) => {\n  // animation state\n  const {\n    0: animation,\n    1: setAnimation\n  } = useState(false); // key state for slides\n\n  const {\n    0: carouselRandomNumber,\n    1: setCarouselRandomNumber\n  } = useState();\n  const [viewportRef, embla] = useEmblaCarousel({\n    loop: true,\n    skipSnaps: false,\n    speed: 8\n  });\n  const {\n    0: prevBtnEnabled,\n    1: setPrevBtnEnabled\n  } = useState(false);\n  const {\n    0: nextBtnEnabled,\n    1: setNextBtnEnabled\n  } = useState(false);\n  const {\n    0: selectedIndex,\n    1: setSelectedIndex\n  } = useState(0);\n  const {\n    0: scrollSnaps,\n    1: setScrollSnaps\n  } = useState([]);\n  const autoplay = useCallback(() => {\n    if (!embla) return;\n\n    if (embla.canScrollNext()) {\n      embla.scrollNext();\n      setCarouselRandomNumber(Math.random());\n      setAnimation(true);\n    } else {\n      embla.scrollTo(0);\n      setCarouselRandomNumber(Math.random());\n      setAnimation(true);\n    }\n  }, [embla]);\n  const {\n    play,\n    stop\n  } = useRecursiveTimeout(autoplay, AUTOPLAY_INTERVAL);\n  const scrollNext = useCallback(() => {\n    if (!embla) return;\n    setCarouselRandomNumber(Math.random());\n    embla.scrollNext();\n    stop();\n  }, [embla, stop]);\n  const scrollPrev = useCallback(() => {\n    if (!embla) return;\n    setCarouselRandomNumber(Math.random());\n    embla.scrollPrev();\n    stop();\n  }, [embla, stop]);\n  const scrollTo = useCallback(index => {\n    embla && embla.scrollTo(index), [embla];\n    setCarouselRandomNumber(Math.random());\n  });\n  const onSelect = useCallback(() => {\n    if (!embla) return;\n    setSelectedIndex(embla.selectedScrollSnap());\n    setPrevBtnEnabled(embla.canScrollPrev());\n    setNextBtnEnabled(embla.canScrollNext());\n  }, [embla, setSelectedIndex]);\n  useEffect(() => {\n    if (!embla) return;\n    onSelect();\n    setScrollSnaps(embla.scrollSnapList());\n    embla.on('select', onSelect);\n    embla.on('pointerDown', stop); // try to return if Embla don't\n  }, [embla, onSelect, setScrollSnaps, stop]);\n  useEffect(() => {\n    play();\n  }, [play]);\n  return /*#__PURE__*/_jsxDEV(CarouselStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"embla__viewport\",\n      ref: viewportRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"embla__container\",\n        children: slides.map(index => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"embla__slide\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"embla__slide__inner\",\n            children: /*#__PURE__*/_jsxDEV(Slide, {\n              mediaByIndex: mediaByIndex,\n              index: index,\n              setAnimation: setAnimation,\n              animation: animation\n            }, `${index}+${selectedIndex === index ? carouselRandomNumber : index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PrevButton, {\n      onClick: scrollPrev,\n      enabled: prevBtnEnabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n      onClick: scrollNext,\n      enabled: nextBtnEnabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"embla__dots\",\n      children: scrollSnaps.map((_, index) => /*#__PURE__*/_jsxDEV(DotButton, {\n        selected: index === selectedIndex,\n        onClick: () => scrollTo(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}; // `${index}+${selectedIndex === index ? carouselRandomNumber : index}`;\n\n\nexport default EmblaCarousel;","map":{"version":3,"sources":["/Volumes/Files/Work/A2Z/frontend/components/Sliders/BannerSlider.js"],"names":["React","useState","useEffect","useCallback","useEmblaCarousel","DotButton","PrevButton","NextButton","useRecursiveTimeout","CarouselStyles","Slide","AUTOPLAY_INTERVAL","EmblaCarousel","slides","mediaByIndex","animation","setAnimation","carouselRandomNumber","setCarouselRandomNumber","viewportRef","embla","loop","skipSnaps","speed","prevBtnEnabled","setPrevBtnEnabled","nextBtnEnabled","setNextBtnEnabled","selectedIndex","setSelectedIndex","scrollSnaps","setScrollSnaps","autoplay","canScrollNext","scrollNext","Math","random","scrollTo","play","stop","scrollPrev","index","onSelect","selectedScrollSnap","canScrollPrev","scrollSnapList","on","map","_"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,UAAhC,QAAkD,mBAAlD;AACA,SAASC,mBAAT,QAAoC,+BAApC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,MAAMC,iBAAiB,GAAG,IAA1B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA8B;AAClD;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4Bf,QAAQ,CAAC,KAAD,CAA1C,CAFkD,CAGlD;;AACA,QAAM;AAAA,OAACgB,oBAAD;AAAA,OAAuBC;AAAvB,MAAkDjB,QAAQ,EAAhE;AAEA,QAAM,CAACkB,WAAD,EAAcC,KAAd,IAAuBhB,gBAAgB,CAAC;AAC5CiB,IAAAA,IAAI,EAAE,IADsC;AAE5CC,IAAAA,SAAS,EAAE,KAFiC;AAG5CC,IAAAA,KAAK,EAAE;AAHqC,GAAD,CAA7C;AAKA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCxB,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAA,OAACyB,cAAD;AAAA,OAAiBC;AAAjB,MAAsC1B,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAA,OAAC2B,aAAD;AAAA,OAAgBC;AAAhB,MAAoC5B,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM;AAAA,OAAC6B,WAAD;AAAA,OAAcC;AAAd,MAAgC9B,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM+B,QAAQ,GAAG7B,WAAW,CAAC,MAAM;AACjC,QAAI,CAACiB,KAAL,EAAY;;AACZ,QAAIA,KAAK,CAACa,aAAN,EAAJ,EAA2B;AACzBb,MAAAA,KAAK,CAACc,UAAN;AACAhB,MAAAA,uBAAuB,CAACiB,IAAI,CAACC,MAAL,EAAD,CAAvB;AACApB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAJD,MAIO;AACLI,MAAAA,KAAK,CAACiB,QAAN,CAAe,CAAf;AACAnB,MAAAA,uBAAuB,CAACiB,IAAI,CAACC,MAAL,EAAD,CAAvB;AACApB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAX2B,EAWzB,CAACI,KAAD,CAXyB,CAA5B;AAaA,QAAM;AAAEkB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAiB/B,mBAAmB,CAACwB,QAAD,EAAWrB,iBAAX,CAA1C;AAEA,QAAMuB,UAAU,GAAG/B,WAAW,CAAC,MAAM;AACnC,QAAI,CAACiB,KAAL,EAAY;AACZF,IAAAA,uBAAuB,CAACiB,IAAI,CAACC,MAAL,EAAD,CAAvB;AACAhB,IAAAA,KAAK,CAACc,UAAN;AACAK,IAAAA,IAAI;AACL,GAL6B,EAK3B,CAACnB,KAAD,EAAQmB,IAAR,CAL2B,CAA9B;AAOA,QAAMC,UAAU,GAAGrC,WAAW,CAAC,MAAM;AACnC,QAAI,CAACiB,KAAL,EAAY;AACZF,IAAAA,uBAAuB,CAACiB,IAAI,CAACC,MAAL,EAAD,CAAvB;AACAhB,IAAAA,KAAK,CAACoB,UAAN;AACAD,IAAAA,IAAI;AACL,GAL6B,EAK3B,CAACnB,KAAD,EAAQmB,IAAR,CAL2B,CAA9B;AAOA,QAAMF,QAAQ,GAAGlC,WAAW,CAACsC,KAAK,IAAI;AACpCrB,IAAAA,KAAK,IAAIA,KAAK,CAACiB,QAAN,CAAeI,KAAf,CAAT,EAAgC,CAACrB,KAAD,CAAhC;AACAF,IAAAA,uBAAuB,CAACiB,IAAI,CAACC,MAAL,EAAD,CAAvB;AACD,GAH2B,CAA5B;AAKA,QAAMM,QAAQ,GAAGvC,WAAW,CAAC,MAAM;AACjC,QAAI,CAACiB,KAAL,EAAY;AACZS,IAAAA,gBAAgB,CAACT,KAAK,CAACuB,kBAAN,EAAD,CAAhB;AACAlB,IAAAA,iBAAiB,CAACL,KAAK,CAACwB,aAAN,EAAD,CAAjB;AACAjB,IAAAA,iBAAiB,CAACP,KAAK,CAACa,aAAN,EAAD,CAAjB;AACD,GAL2B,EAKzB,CAACb,KAAD,EAAQS,gBAAR,CALyB,CAA5B;AAOA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACkB,KAAL,EAAY;AACZsB,IAAAA,QAAQ;AACRX,IAAAA,cAAc,CAACX,KAAK,CAACyB,cAAN,EAAD,CAAd;AACAzB,IAAAA,KAAK,CAAC0B,EAAN,CAAS,QAAT,EAAmBJ,QAAnB;AACAtB,IAAAA,KAAK,CAAC0B,EAAN,CAAS,aAAT,EAAwBP,IAAxB,EALc,CAOd;AACD,GARQ,EAQN,CAACnB,KAAD,EAAQsB,QAAR,EAAkBX,cAAlB,EAAkCQ,IAAlC,CARM,CAAT;AAUArC,EAAAA,SAAS,CAAC,MAAM;AACdoC,IAAAA,IAAI;AACL,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIA,sBACE,QAAC,cAAD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAiC,MAAA,GAAG,EAAEnB,WAAtC;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,kBACGN,MAAM,CAACkC,GAAP,CAAWN,KAAK,iBACf;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,qBAAf;AAAA,mCACE,QAAC,KAAD;AAIE,cAAA,YAAY,EAAE3B,YAJhB;AAKE,cAAA,KAAK,EAAE2B,KALT;AAME,cAAA,YAAY,EAAEzB,YANhB;AAOE,cAAA,SAAS,EAAED;AAPb,eACQ,GAAE0B,KAAM,IACZb,aAAa,KAAKa,KAAlB,GAA0BxB,oBAA1B,GAAiDwB,KAClD,EAHH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,WAAmCA,KAAnC;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAoBE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAED,UAArB;AAAiC,MAAA,OAAO,EAAEhB;AAA1C;AAAA;AAAA;AAAA;AAAA,YApBF,eAqBE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEU,UAArB;AAAiC,MAAA,OAAO,EAAER;AAA1C;AAAA;AAAA;AAAA;AAAA,YArBF,eAsBE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGI,WAAW,CAACiB,GAAZ,CAAgB,CAACC,CAAD,EAAIP,KAAJ,kBACf,QAAC,SAAD;AAEE,QAAA,QAAQ,EAAEA,KAAK,KAAKb,aAFtB;AAGE,QAAA,OAAO,EAAE,MAAMS,QAAQ,CAACI,KAAD;AAHzB,SACOA,KADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD,CAzGD,C,CA2GA;;;AAEA,eAAe7B,aAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useEmblaCarousel } from 'embla-carousel/react';\nimport { DotButton, PrevButton, NextButton } from './CarouselButtons';\nimport { useRecursiveTimeout } from '../../lib/useRecursiveTimeout';\nimport CarouselStyles from './CarouselStyles';\nimport Slide from './Slide';\n\nconst AUTOPLAY_INTERVAL = 4000;\n\nconst EmblaCarousel = ({ slides, mediaByIndex }) => {\n  // animation state\n  const [animation, setAnimation] = useState(false);\n  // key state for slides\n  const [carouselRandomNumber, setCarouselRandomNumber] = useState();\n\n  const [viewportRef, embla] = useEmblaCarousel({\n    loop: true,\n    skipSnaps: false,\n    speed: 8,\n  });\n  const [prevBtnEnabled, setPrevBtnEnabled] = useState(false);\n  const [nextBtnEnabled, setNextBtnEnabled] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [scrollSnaps, setScrollSnaps] = useState([]);\n\n  const autoplay = useCallback(() => {\n    if (!embla) return;\n    if (embla.canScrollNext()) {\n      embla.scrollNext();\n      setCarouselRandomNumber(Math.random());\n      setAnimation(true);\n    } else {\n      embla.scrollTo(0);\n      setCarouselRandomNumber(Math.random());\n      setAnimation(true);\n    }\n  }, [embla]);\n\n  const { play, stop } = useRecursiveTimeout(autoplay, AUTOPLAY_INTERVAL);\n\n  const scrollNext = useCallback(() => {\n    if (!embla) return;\n    setCarouselRandomNumber(Math.random());\n    embla.scrollNext();\n    stop();\n  }, [embla, stop]);\n\n  const scrollPrev = useCallback(() => {\n    if (!embla) return;\n    setCarouselRandomNumber(Math.random());\n    embla.scrollPrev();\n    stop();\n  }, [embla, stop]);\n\n  const scrollTo = useCallback(index => {\n    embla && embla.scrollTo(index), [embla];\n    setCarouselRandomNumber(Math.random());\n  });\n\n  const onSelect = useCallback(() => {\n    if (!embla) return;\n    setSelectedIndex(embla.selectedScrollSnap());\n    setPrevBtnEnabled(embla.canScrollPrev());\n    setNextBtnEnabled(embla.canScrollNext());\n  }, [embla, setSelectedIndex]);\n\n  useEffect(() => {\n    if (!embla) return;\n    onSelect();\n    setScrollSnaps(embla.scrollSnapList());\n    embla.on('select', onSelect);\n    embla.on('pointerDown', stop);\n\n    // try to return if Embla don't\n  }, [embla, onSelect, setScrollSnaps, stop]);\n\n  useEffect(() => {\n    play();\n  }, [play]);\n\n  return (\n    <CarouselStyles>\n      <div className='embla__viewport' ref={viewportRef}>\n        <div className='embla__container'>\n          {slides.map(index => (\n            <div className='embla__slide' key={index}>\n              <div className='embla__slide__inner'>\n                <Slide\n                  key={`${index}+${\n                    selectedIndex === index ? carouselRandomNumber : index\n                  }`}\n                  mediaByIndex={mediaByIndex}\n                  index={index}\n                  setAnimation={setAnimation}\n                  animation={animation}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <PrevButton onClick={scrollPrev} enabled={prevBtnEnabled} />\n      <NextButton onClick={scrollNext} enabled={nextBtnEnabled} />\n      <div className='embla__dots'>\n        {scrollSnaps.map((_, index) => (\n          <DotButton\n            key={index}\n            selected={index === selectedIndex}\n            onClick={() => scrollTo(index)}\n          />\n        ))}\n      </div>\n    </CarouselStyles>\n  );\n};\n\n// `${index}+${selectedIndex === index ? carouselRandomNumber : index}`;\n\nexport default EmblaCarousel;\n"]},"metadata":{},"sourceType":"module"}